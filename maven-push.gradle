/*
 * Copyright 2018 Vorlonsoft LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * <p>GradleMavenPush Gradle Script plugin</p>
 * <p>Helper to upload Gradle Android Artifacts, Gradle Java Artifacts and
 * Gradle Kotlin Artifacts to Maven repositories (JCenter, Maven Central,
 * Corporate staging/snapshot servers and local Maven repositories).</p>
 *
 * @since 1.0.0
 * @version 1.6.0 Yokohama
 * @author Alexander Savin
 */

apply plugin: 'maven'
apply plugin: 'signing'

Class MavenPush = new GroovyClassLoader(getClass().getClassLoader()).parseClass(MavenPushInitializer.downloadGroovyClass('https://raw.github.com/Vorlonsoft/GradleMavenPush/master/MavenPush.groovy', 'MavenPush.groovy'))
Class MavenPushUtils = new GroovyClassLoader(getClass().getClassLoader()).parseClass(MavenPushInitializer.downloadGroovyClass('https://raw.github.com/Vorlonsoft/GradleMavenPush/master/MavenPushUtils.groovy', 'MavenPushUtils.groovy'))

afterEvaluate { project ->
    final boolean androidOs = MavenPushUtils.with(project).isAndroid()
    final boolean kotlinLanguage = MavenPushUtils.with(project).isKotlin()
    final boolean varArtifact = MavenPush.with(project).getVarArtifact()
    final boolean androidJarArtifact = MavenPush.with(project).getAndroidJarArtifact()
    final boolean fatjarArtifact = MavenPush.with(project).getFatjarArtifact()
    final boolean apklibArtifact = MavenPush.with(project).getApklibArtifact()
    final boolean pomUniqueVersion = MavenPush.with(project).getPomUniqueVersion()
    final boolean dokka = MavenPush.with(project).isDokka()
    final String androidJarMainClass = MavenPush.with(project).getAndroidJarMainClass()
    final String[] gradleVersion = gradle.gradleVersion.split('[\\.]')
    final int gradleMajor = Integer.parseInt(gradleVersion[0])
    final String dokkaFatJarVersion = MavenPush.with(project).getDokkaFatJarVersion()
    final String dokkaFatJarPath = 'org/jetbrains/dokka/dokka-fatjar'
    final String dokkaOutputFormat = MavenPush.with(project).getDokkaOutputFormat()
    final String javaAPISpecificationLink = MavenPushUtils.getJavaAPISpecificationLink(JavaVersion.current().toString())
    final String repositoryUsername = MavenPush.with(project).getRepositoryUsername()
    final String repositoryPassword = MavenPush.with(project).getRepositoryPassword()
    final String pomGroupId = MavenPush.with(project).getPomGroupId()
    final String pomArtifactId = MavenPush.with(project).getPomArtifactId()
    final String pomVersionName = MavenPush.with(project).getPomVersionName()
    final String pomName = MavenPush.with(project).getPomName()
    final String pomPackaging = MavenPush.with(project).getPomPackaging()
    final String pomDescription = MavenPush.with(project).getPomDescription()
    final String pomUrl = MavenPush.with(project).getPomUrl()
    final String pomInceptionYear = MavenPush.with(project).getPomInceptionYear()
    final String pomScmUrl = MavenPush.with(project).getPomScmUrl()
    final String pomScmConnection = MavenPush.with(project).getPomScmConnection()
    final String pomScmDevConnection = MavenPush.with(project).getPomScmDevConnection()
    final String pomScmTag = MavenPush.with(project).getPomScmTag()
    final String pomLicenseName = MavenPush.with(project).getPomLicenseName()
    final String pomLicenseUrl = MavenPush.with(project).getPomLicenseUrl()
    final String pomDistribution = MavenPush.with(project).getPomLicenseDist()
    final String pomLicenseComments = MavenPush.with(project).getPomLicenseComments()
    final String pomOrg = MavenPush.with(project).getOrg()
    final String pomOrgUrl = MavenPush.with(project).getOrgUrl()
    final String pomDeveloperId = MavenPush.with(project).getDeveloperId()
    final String pomDeveloperName = MavenPush.with(project).getDeveloperName()
    final String pomDeveloperEmail = MavenPush.with(project).getDeveloperEmail()
    final String pomDeveloperUrl = MavenPush.with(project).getDeveloperUrl()
    final String pomDeveloperOrg = MavenPush.with(project).getDeveloperOrg()
    final String pomDeveloperOrgUrl = MavenPush.with(project).getDeveloperOrgUrl()
    final String[] pomDeveloperRoles = MavenPush.with(project).getDeveloperRoles()
    final String pomDeveloperTimezone = MavenPush.with(project).getDeveloperTimezone()
    final String[] pomDevelopers = MavenPush.with(project).getDevelopers()
    final String[] pomContributors = MavenPush.with(project).getContributors()
    final String pomIssueSystem = MavenPush.with(project).getIssueSystem()
    final String pomIssueSystemUrl = MavenPush.with(project).getIssueSystemUrl()
    final String pomCiSystem = MavenPush.with(project).getCiSystem()
    final String pomCiSystemUrl = MavenPush.with(project).getCiSystemUrl()
    final String[] pomMailingLists = MavenPush.with(project).getMailingLists()
    final String[] pomRepositories = MavenPush.with(project).getRepositories()
    final String pomDistDownloadUrl = MavenPush.with(project).getDistDownloadUrl()
    final def pomPackagingConfig = {
        packaging pomPackaging
    }
    final def pomConfig = {
        url pomUrl
        if (pomInceptionYear != '') {
            inceptionYear pomInceptionYear
        }

        if ((pomOrg != '') || (pomOrgUrl != '')) {
            organization {
                if (pomOrg != '') {
                    name pomOrg
                }
                if (pomOrgUrl != '') {
                    url pomOrgUrl
                }
            }
        }

        licenses {
            license {
                name pomLicenseName
                url pomLicenseUrl
                distribution pomDistribution
                if (pomLicenseComments != '') {
                    comments pomLicenseComments
                }
            }
        }

        developers {
            developer {
                id pomDeveloperId
                name pomDeveloperName
                email pomDeveloperEmail
                if (pomDeveloperUrl != '') {
                    url pomDeveloperUrl
                }
                if (pomDeveloperOrg != '') {
                    organization pomDeveloperOrg
                }
                if (pomDeveloperOrgUrl != '') {
                    organizationUrl pomDeveloperOrgUrl
                }
                if (pomDeveloperRoles.size() > 0) {
                    roles {
                        for (byte i = 0; i < pomDeveloperRoles.size(); i++) {
                            role pomDeveloperRoles[i]
                        }
                    }
                }
                if (pomDeveloperTimezone != '') {
                    timezone pomDeveloperTimezone
                }
            }
            for (short i = 0; i + 2 < pomDevelopers.size(); i += 3) {
                developer {
                    id pomDevelopers[i]
                    name pomDevelopers[i + 1]
                    email pomDevelopers[i + 2]
                }
            }
        }

        if (pomContributors.size() > 1) {
            contributors {
                for (short i = 0; i + 1 < pomContributors.size(); i += 2) {
                    contributor {
                        name pomContributors[i]
                        email pomContributors[i + 1]
                    }
                }
            }
        }

        if (pomMailingLists.size() > 2) {
            mailingLists {
                for (byte i = 0; i + 2 < pomMailingLists.size(); i += 3) {
                    mailingList {
                        name pomMailingLists[i]
                        subscribe pomMailingLists[i + 1]
                        unsubscribe pomMailingLists[i + 2]
                    }
                }
            }
        }

        scm {
            connection pomScmConnection
            developerConnection pomScmDevConnection
            tag pomScmTag
            url pomScmUrl
        }

        if ((pomIssueSystem != '') || (pomIssueSystemUrl != '')) {
            issueManagement {
                if (pomIssueSystem != '') {
                    system pomIssueSystem
                }
                if (pomIssueSystemUrl != '') {
                    url pomIssueSystemUrl
                }
            }
        }

        if ((pomCiSystem != '') || (pomCiSystemUrl != '')) {
            ciManagement {
                if (pomCiSystem != '') {
                    system pomCiSystem
                }
                if (pomCiSystemUrl != '') {
                    url pomCiSystemUrl
                }
            }
        }

        if (pomDistDownloadUrl != '') {
            distributionManagement {
                downloadUrl pomDistDownloadUrl
            }
        }
    }

    /**
     *  Sets the artifacts base file name to match
     *  the artifact ID in any case
     */
    project.archivesBaseName = pomArtifactId

    task dokkaEngineInitializer {
        MavenPushUtils.downloadLib("https://jcenter.bintray.com/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.pom",
                dokkaFatJarPath, dokkaFatJarVersion, "dokka-fatjar-${dokkaFatJarVersion}.pom")
        MavenPushUtils.downloadLib("https://jcenter.bintray.com/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar",
                dokkaFatJarPath, dokkaFatJarVersion, "dokka-fatjar-${dokkaFatJarVersion}.jar")
    }

    signing {
        required {
            MavenPush.with(project).isReleaseBuild() &&
            (gradle.taskGraph.hasTask('uploadArchives') || gradle.taskGraph.hasTask('deployOnServerRepository'))
        }
        sign configurations.archives
    }

    task deployOnServerRepository(type: GradleBuild, dependsOn: assemble) {
        description 'Deploys the artifacts to the server repository.'
        tasks = ['clean', 'build', 'uploadArchives']
    }

    task deployOnLocalRepository(type: GradleBuild, dependsOn: assemble) {
        description 'Deploys the artifacts to the local repository.'
        tasks = ['clean', 'build', 'installArchives']
    }

    task installOnLocalRepository(type: GradleBuild, dependsOn: assemble) {
        description 'Installs the artifacts to the local repository.'
        tasks = ['clean', 'build', 'install']
    }

    uploadArchives {
        description 'Deploys the artifacts to the server repository.'
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment ->
                    signing.signPom(deployment)
                }

                pom.groupId = pomGroupId
                pom.artifactId = pomArtifactId
                pom.version = pomVersionName
                pom.packaging = pomPackaging

                repository(url: MavenPush.with(project).getReleaseRepositoryUrl()) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
                snapshotRepository(url: MavenPush.with(project).getSnapshotRepositoryUrl()) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }

                pom.project {
                    uniqueVersion = pomUniqueVersion

                    name pomName
                    description pomDescription

                    if (pomRepositories.size() > 1) {
                        repositories {
                            for (byte i = 0; i + 1 < pomRepositories.size(); i += 2) {
                                repository {
                                    id pomRepositories[i]
                                    url pomRepositories[i + 1]
                                }
                            }
                        }
                    }
                }

                MavenPushUtils.pomFinalizer(pom, pomPackagingConfig, pomConfig)
            }
        }
    }

    task installArchives(type: Upload, dependsOn: assemble) {
        description 'Deploys the artifacts to the local repository.'
        configuration = configurations.archives
        repositories {
            mavenDeployer {

                pom.groupId = pomGroupId
                pom.artifactId = pomArtifactId
                pom.version = pomVersionName
                pom.packaging = pomPackaging

                repository url: "file:///${System.properties['user.home']}/.m2/repository"

                pom.project {
                    uniqueVersion = pomUniqueVersion

                    name pomName
                    description pomDescription

                    if (pomRepositories.size() > 1) {
                        repositories {
                            for (byte i = 0; i + 1 < pomRepositories.size(); i += 2) {
                                repository {
                                    id pomRepositories[i]
                                    url pomRepositories[i + 1]
                                }
                            }
                        }
                    }
                }

                MavenPushUtils.pomFinalizer(pom, pomPackagingConfig, pomConfig)
            }
        }
    }

    if (dokka) {
        task dokkaEngine(type: Exec, dependsOn: dokkaEngineInitializer) {
            description 'Generates the documentation by Dokka.'
            final byte srcDirsJavaNumber
            final byte srcDirsKotlinNumber
            final byte classpathNumber
            final String classpath
            final String srcDirOne
            final String srcDirTwo
            final String srcDirThree
            String links
            if (androidOs) {
                srcDirsJavaNumber = (byte) ((android.sourceSets.main.java.srcDirs != null) ? android.sourceSets.main.java.srcDirs.size() : 0)
                srcDirsKotlinNumber = (byte) ((kotlinLanguage && (android.sourceSets.main.kotlin.srcDirs != null)) ? android.sourceSets.main.kotlin.srcDirs.size() : 0)
                classpathNumber = (byte) ((android.getBootClasspath() != null) ? android.getBootClasspath().size() : 0)
                classpath = (classpathNumber > 0) ? android.getBootClasspath()[0] : ''
                srcDirOne = (srcDirsJavaNumber > 0) ? android.sourceSets.main.java.srcDirs[0] : ''
                srcDirTwo = (srcDirsJavaNumber > 1) ? android.sourceSets.main.java.srcDirs[1] : ''
                srcDirThree = (srcDirsKotlinNumber > 0) ? android.sourceSets.main.kotlin.srcDirs[0] : ''
                links = 'https://developer.android.com/reference/^https://developer.android.com/reference/package-list^^' +
                        "file:///${android.sdkDirectory}/docs/reference/^file:///${android.sdkDirectory}/docs/reference/package-list^^" +
                        "${javaAPISpecificationLink}^${javaAPISpecificationLink}"
                if (javaAPISpecificationLink == 'https://docs.oracle.com/javase/10/docs/api/') {
                    links += 'element-list'
                } else {
                    links += 'package-list'
                }
                if (srcDirsJavaNumber > 0) {
                    mkdir android.sourceSets.main.java.srcDirs[0]
                    if (srcDirsJavaNumber > 1) {
                        mkdir android.sourceSets.main.java.srcDirs[1]
                    }
                }
                if (srcDirsKotlinNumber > 0) {
                    mkdir android.sourceSets.main.kotlin.srcDirs[0]
                }
            } else {
                srcDirsJavaNumber = (byte) ((sourceSets.main.java.srcDirs != null) ? sourceSets.main.java.srcDirs.size() : 0)
                srcDirsKotlinNumber = (byte) ((kotlinLanguage && (sourceSets.main.kotlin.srcDirs != null)) ? sourceSets.main.kotlin.srcDirs.size() : 0)
                classpathNumber = 0
                classpath = ''
                srcDirOne = (srcDirsJavaNumber > 0) ? sourceSets.main.java.srcDirs[0] : ''
                srcDirTwo = (srcDirsJavaNumber > 1) ? sourceSets.main.java.srcDirs[1] : ''
                srcDirThree = (srcDirsKotlinNumber > 0) ? sourceSets.main.kotlin.srcDirs[0] : ''
                links = javaAPISpecificationLink
                if (srcDirsJavaNumber > 0) {
                    mkdir sourceSets.main.java.srcDirs[0]
                    if (srcDirsJavaNumber > 1) {
                        mkdir sourceSets.main.java.srcDirs[1]
                    }
                }
                if (srcDirsKotlinNumber > 0) {
                    mkdir sourceSets.main.kotlin.srcDirs[0]
                }
            }
            if (srcDirsJavaNumber + srcDirsKotlinNumber > 0) {
                commandLine 'java', '-jar',
                        "${System.properties['user.home']}/.m2/repository/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar",
                        srcDirOne, srcDirTwo, srcDirThree, '-output', "${buildDir}/${dokkaOutputFormat}", '-format', dokkaOutputFormat, '-links', links,
                        (classpathNumber > 0) ? '-classpath' : '', (classpathNumber > 0) ? classpath : ''
            } else {
                commandLine 'java', '-jar',
                        "${System.properties['user.home']}/.m2/repository/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar"
            }
        }

        task dokkaEngineJar(type: Jar, dependsOn: dokkaEngine) {
            description 'Archives the documentation created by Dokka.'
            classifier = 'javadoc'
            from "${buildDir}/${dokkaOutputFormat}"
        }
    }

    if (varArtifact) {
        task androidVar(type: Jar, dependsOn: ['androidApklib', 'androidJar']) {
            classifier = ''
            extension = 'var'
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            if (androidJarMainClass != '') {
                manifest {
                    attributes 'Main-Class': androidJarMainClass
                }
            }
            if (file("${buildDir}/libs/${pomArtifactId}-${pomVersionName}.jar").exists()) {
                from zipTree(file("${buildDir}/libs/${pomArtifactId}-${pomVersionName}.jar"))
            } else if (file("${buildDir}/libs/${pomArtifactId}.jar").exists()) {
                from zipTree(file("${buildDir}/libs/${pomArtifactId}.jar"))
            }
            if (file("${buildDir}/outputs/aar/${project.name}-release.aar").exists()) {
                from {
                    zipTree(file("${buildDir}/outputs/aar/${project.name}-release.aar")).findAll {
                        it.getName() == 'classes.jar'
                    }.collect {
                        it
                    }
                }
            }
            if (file("${buildDir}/distributions/${pomArtifactId}-${pomVersionName}.apklib").exists()) {
                from zipTree(file("${buildDir}/distributions/${pomArtifactId}-${pomVersionName}.apklib"))
            } else if (file("${buildDir}/distributions/${pomArtifactId}.apklib").exists()) {
                from zipTree(file("${buildDir}/distributions/${pomArtifactId}.apklib"))
            }
        }
    }

    if (androidJarArtifact) {
        task androidJar(type: Jar, dependsOn: ['check', 'bundleReleaseAar']) {
            classifier = ''
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            if (androidJarMainClass != '') {
                manifest {
                    attributes 'Main-Class': androidJarMainClass
                }
            }
            if (file("${buildDir}/outputs/aar/${project.name}-release.aar").exists()) {
                from {
                    zipTree(file("${buildDir}/outputs/aar/${project.name}-release.aar")).findAll {
                        it.getName() == 'classes.jar'
                    }.collect {
                        zipTree(it)
                    }
                }
            }
            from "${buildDir}/tmp/kotlin-classes/release/"
            if (file("${buildDir}/intermediates/packaged-classes/release/classes.jar").exists()) {
                from zipTree(file("${buildDir}/intermediates/packaged-classes/release/classes.jar"))
            }
            from "${buildDir}/intermediates/intermediate-jars/release/classes/dir/"
            if (file("${buildDir}/intermediates/intermediate-jars/release/classes.jar").exists()) {
                from zipTree(file("${buildDir}/intermediates/intermediate-jars/release/classes.jar"))
            }
        }
    }

    if (apklibArtifact) {
        task androidApklib(type: Zip, dependsOn: 'bundleReleaseAar') {
            classifier = ''
            extension = 'apklib'
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE

            if (file("${buildDir}/outputs/aar/${project.name}-release.aar").exists()) {
                from {
                    zipTree(file("${buildDir}/outputs/aar/${project.name}-release.aar")).findAll {
                        it.getName() == 'AndroidManifest.xml'
                    }.collect {
                        it
                    }
                }
            }
            from '/src/main/AndroidManifest.xml'
            into('assets') {
                from '/src/main/assets/'
            }
            into('libs') {
                from '/libs/'
            }
            into('res') {
                from '/src/main/res/'
            }
            into('src/cpp') {
                from '/src/main/cpp/'
            }
            into('src') {
                from android.sourceSets.main.java.sourceFiles
                from '/src/main/groovy/'
                if (kotlinLanguage) {
                    final String[] sources
                    if (android.sourceSets.main.kotlin.srcDirs != null) {
                        sources = android.sourceSets.main.java.srcDirs + android.sourceSets.main.kotlin.srcDirs
                    } else {
                        sources = android.sourceSets.main.java.srcDirs
                    }
                    final byte srcDirsNumber = (byte) ((sources != null) ? sources.size() : 0)
                    for (byte i = 0; i < srcDirsNumber; i++) {
                        from sources[i]
                    }
                }
            }
        }
    }

    if (androidOs) {
        task install(type: Upload, dependsOn: assemble) {
            description 'Installs the artifacts to the local repository.'
            configuration = configurations.archives
            repositories {
                mavenInstaller {

                    pom.groupId = pomGroupId
                    pom.artifactId = pomArtifactId
                    pom.version = pomVersionName
                    pom.packaging = pomPackaging

                    pom.project {
                        name pomName
                        description pomDescription

                        if (pomRepositories.size() > 1) {
                            repositories {
                                for (byte i = 0; i + 1 < pomRepositories.size(); i += 2) {
                                    repository {
                                        id pomRepositories[i]
                                        url pomRepositories[i + 1]
                                    }
                                }
                            }
                        }
                    }

                    MavenPushUtils.pomFinalizer(pom, pomPackagingConfig, pomConfig)
                }
            }
        }

        if (fatjarArtifact) {
            task createAndroidFatjar(type: Jar, dependsOn: ['check', 'bundleReleaseAar']) {
                classifier = 'fatjar'
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                if (androidJarMainClass != '') {
                    manifest {
                        attributes 'Main-Class': androidJarMainClass
                    }
                }
                configurations.implementation.setCanBeResolved(true)
                configurations.api.setCanBeResolved(true)
                from {
                    configurations.compile.findAll {
                        it.getName() != 'android.jar' && !it.getName().startsWith('junit') && !it.getName().startsWith('hamcrest')
                    }.collect {
                        if (it.isDirectory()) {
                            it
                        } else if (it.getName().endsWith('.aar')) {
                            zipTree(it).findAll {
                                it.getName() == 'classes.jar'
                            }.collect {
                                zipTree(it)
                            }
                        } else {
                            zipTree(it)
                        }
                    }
                } {
                    exclude "META-INF/*.SF"
                    exclude "META-INF/*.DSA"
                    exclude "META-INF/*.RSA"
                }
                from {
                    configurations.implementation.findAll {
                        it.getName() != 'android.jar' && !it.getName().startsWith('junit') && !it.getName().startsWith('hamcrest')
                    }.collect {
                        if (it.isDirectory()) {
                            it
                        } else if (it.getName().endsWith('.aar')) {
                            zipTree(it).findAll {
                                it.getName() == 'classes.jar'
                            }.collect {
                                zipTree(it)
                            }
                        } else {
                            zipTree(it)
                        }
                    }
                } {
                    exclude "META-INF/*.SF"
                    exclude "META-INF/*.DSA"
                    exclude "META-INF/*.RSA"
                }
                from {
                    configurations.api.findAll {
                        it.getName() != 'android.jar' && !it.getName().startsWith('junit') && !it.getName().startsWith('hamcrest')
                    }.collect {
                        if (it.isDirectory()) {
                            it
                        } else if (it.getName().endsWith('.aar')) {
                            zipTree(it).findAll {
                                it.getName() == 'classes.jar'
                            }.collect {
                                zipTree(it)
                            }
                        } else {
                            zipTree(it)
                        }
                    }
                } {
                    exclude "META-INF/*.SF"
                    exclude "META-INF/*.DSA"
                    exclude "META-INF/*.RSA"
                }

                if (file("${buildDir}/outputs/aar/${project.name}-release.aar").exists()) {
                    from {
                        zipTree(file("${buildDir}/outputs/aar/${project.name}-release.aar")).findAll {
                            it.getName() == 'classes.jar'
                        }.collect {
                            zipTree(it)
                        }
                    }
                }
                from "${buildDir}/tmp/kotlin-classes/release/"
                from "${buildDir}/intermediates/javac/release/compileReleaseJavaWithJavac/classes/"
                if (file("${buildDir}/intermediates/packaged-classes/release/classes.jar").exists()) {
                    from zipTree(file("${buildDir}/intermediates/packaged-classes/release/classes.jar"))
                }
                from "${buildDir}/intermediates/intermediate-jars/release/classes/dir/"
                if (file("${buildDir}/intermediates/intermediate-jars/release/classes.jar").exists()) {
                    from zipTree(file("${buildDir}/intermediates/intermediate-jars/release/classes.jar"))
                }
            }
        }

        if (!dokka) {
            task androidJavadocs(type: Javadoc) {
                source += files(android.sourceSets.main.java.srcDirs)
                if (kotlinLanguage && (android.sourceSets.main.kotlin.srcDirs != null)) {
                    source += files(android.sourceSets.main.kotlin.srcDirs)
                }
                options {
                    linksOffline 'https://developer.android.com/reference/', "file:///${android.sdkDirectory}/docs/reference/"
                }
                exclude '**/*.cpp', '**/*.groovy', '**/*.kt', '**/*.md', '**/R.html', '**/R.*.html'
            }

            task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                classifier = 'javadoc'
                from androidJavadocs.destinationDir
            }

            android.libraryVariants.all { variant ->
                androidJavadocs.doFirst {
                    classpath += files(android.bootClasspath)
                    classpath += files(variant.javaCompileProvider.get().classpath.files)
                    // Process AAR dependencies
                    def aarDependencies = classpath.filter {
                        it.name.endsWith('.aar')
                    }
                    classpath -= aarDependencies
                    aarDependencies.each { aar ->
                        // Extract classes.jar from the AAR dependency and add it to the androidJavadocs classpath
                        final String outputPath = "${buildDir}/tmp/aarJar/${aar.name.replace('.aar', '.jar')}"
                        classpath += files(outputPath)
                        // Use a task so the actual extraction only happens before the androidJavadocs task is run
                        dependsOn task(name: "extract${aar.name}").doLast {
                            MavenPushUtils.extractEntry(aar, 'classes.jar', outputPath)
                        }
                    }
                }
            }
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            from android.sourceSets.main.java.sourceFiles
            into('cpp') {
                from '/src/main/cpp/'
            }
            from '/src/main/groovy/'
            if (kotlinLanguage) {
                final String[] sources
                if (android.sourceSets.main.kotlin.srcDirs != null) {
                    sources = android.sourceSets.main.java.srcDirs + android.sourceSets.main.kotlin.srcDirs
                } else {
                    sources = android.sourceSets.main.java.srcDirs
                }
                final byte srcDirsNumber = (byte) ((sources != null) ? sources.size() : 0)
                for (byte i = 0; i < srcDirsNumber; i++) {
                    from sources[i]
                }
            }
        }
    } else {
        install {
            description 'Installs the artifacts to the local repository.'
            configuration = configurations.archives
            repositories {
                mavenInstaller {

                    pom.groupId = pomGroupId
                    pom.artifactId = pomArtifactId
                    pom.version = pomVersionName
                    pom.packaging = pomPackaging

                    pom.project {
                        name pomName
                        description pomDescription

                        if (pomRepositories.size() > 1) {
                            repositories {
                                for (byte i = 0; i + 1 < pomRepositories.size(); i += 2) {
                                    repository {
                                        id pomRepositories[i]
                                        url pomRepositories[i + 1]
                                    }
                                }
                            }
                        }
                    }

                    MavenPushUtils.pomFinalizer(pom, pomPackagingConfig, pomConfig)
                }
            }
        }

        if (fatjarArtifact) {
            task createFatjar(type: Jar, dependsOn: 'compileJava') {
                classifier = 'fatjar'
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                configurations {
                    exclude compileOnly
                }
                manifest.from project.jar.manifest
                from {
                    configurations.compileClasspath.findAll {
                        it.getName() != 'android.jar' && !it.getName().startsWith('junit') && !it.getName().startsWith('hamcrest')
                    }.collect {
                        if (it.isDirectory()) {
                            it
                        } else if (it.getName().endsWith('.aar')) {
                            zipTree(it).findAll {
                                it.getName() == 'classes.jar'
                            }.collect {
                                zipTree(it)
                            }
                        } else {
                            zipTree(it)
                        }
                    }
                } {
                    exclude "META-INF/*.SF"
                    exclude "META-INF/*.DSA"
                    exclude "META-INF/*.RSA"
                }
                if (gradleMajor < 4) {
                    from sourceSets.main.output.classesDir
                } else {
                    from sourceSets.main.output.classesDirs
                }
                with jar
            }
        }

        if (!dokka) {
            task coreJavadoc(type: Javadoc) {
                source = sourceSets.main.java.srcDirs
                if (kotlinLanguage && (sourceSets.main.kotlin.srcDirs != null)) {
                    source += sourceSets.main.kotlin.srcDirs
                }
                exclude '**/*.cpp', '**/*.groovy', '**/*.kt', '**/*.md'
            }

            task javadocsJar(type: Jar, dependsOn: coreJavadoc) {
                classifier = 'javadoc'
                from coreJavadoc.destinationDir
            }
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            from sourceSets.main.allSource
            into('cpp') {
                from '/src/main/cpp/'
            }
            from '/src/main/groovy/'
            if (kotlinLanguage) {
                final String[] sources
                if (sourceSets.main.kotlin.srcDirs != null) {
                    sources = sourceSets.main.java.srcDirs + sourceSets.main.kotlin.srcDirs
                } else {
                    sources = sourceSets.main.java.srcDirs
                }
                final byte srcDirsNumber = (byte) ((sources != null) ? sources.size() : 0)
                for (byte i = 0; i < srcDirsNumber; i++) {
                    from sources[i]
                }
            }
        }
    }

    artifacts {
        if (dokka) {
            archives dokkaEngineJar
        }
        if (varArtifact) {
            archives androidVar
        }
        if (androidJarArtifact) {
            archives androidJar
        }
        if (apklibArtifact) {
            archives androidApklib
        }
        if (androidOs) {
            if (fatjarArtifact) {
                archives createAndroidFatjar
            }
            if (!dokka) {
                archives androidJavadocsJar
            }
            archives androidSourcesJar
        } else {
            if (createFatjar) {
                archives createFatjar
            }
            if (!dokka) {
                archives javadocsJar
            }
            archives sourcesJar
        }
    }

    tasks.withType(Javadoc).all {
        failOnError = false
        options.encoding = MavenPush.with(project).getJavadocEncoding()
        options.docEncoding = MavenPush.with(project).getJavadocDocEncoding()
        options.charSet = MavenPush.with(project).getJavadocCharSet()
        options.author = true
        options.version = true
        options.addStringOption('link', javaAPISpecificationLink)
        if (JavaVersion.current().isJava8Compatible()) {
            if (androidOs) {
                /* JDK 1.8 has a bug that requires the rt.jar file to be
                   in the bootclasspath (https://stackoverflow.com/a/30458820). */
                options.bootClasspath = [file("${System.properties['java.home']}/jre/lib/rt.jar")] + android.bootClasspath
            }
            if (!MavenPush.with(project).getDoclintCheck()) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
            if (JavaVersion.current().isJava9Compatible()) {
                if (MavenPush.with(project).isHtml5()) {
                    options.addBooleanOption('html5', true)
                } else {
                    options.addBooleanOption('html4', true)
                }
            }
        }
    }
}

/**
 * <p>MavenPushInitializer Class - class with GradleMavenPush Gradle Script plugin initializers.</p>
 *
 * @since 1.6.0 Yokohama
 * @version 1.6.0 Yokohama
 * @author Alexander Savin
 */
final class MavenPushInitializer {

    private MavenPushInitializer() {
        throw new AssertionError()
    }

    /**
     * Downloads Groovy Class source file
     *
     * @param url Groovy Class source file url
     * @param name Groovy Class source file local repository name
     * @return Groovy Class source file
     */
    static File downloadGroovyClass(String url, String name) {
        File file = new File("${System.properties['user.home']}/.m2/repository/com/vorlonsoft/GradleMavenPush/${name}")
        file.parentFile.mkdirs()
        if (file.exists()) {
            file.delete()
        }
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOutputStream ->
                fileOutputStream << downloadStream
            }
        }
        return file
    }
}